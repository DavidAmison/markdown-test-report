name: release

on:
  push:
    tags:
      - "v*"

jobs:

  init:
    runs-on: ubuntu-20.04
    outputs:
      version: ${{steps.version.outputs.version}}
      prerelease: ${{steps.state.outputs.prerelease}}
    steps:
      - name: Evaluate state
        id: state
        run: |
          test -z "${{github.head_ref}}" && echo '::set-output name=do-publish::true'
          if [[ "${{ github.event.ref }}" =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo ::set-output name=release::true
          elif [[ "${{ github.event.ref }}" =~ ^refs/tags/v.*$ ]]; then
              echo ::set-output name=prerelease::true
          fi

      - name: Set version
        id: version
        run: |
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          [ "$VERSION" == "main" ] && VERSION=latest
          echo VERSION=$VERSION
          echo "::set-output name=version::$VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

  ci:
    uses: ctron/markdown-test-report/.github/workflows/ci.yaml@main

  release:
    needs: [ init, ci ]
    runs-on: ubuntu-20.04
    steps:

      - uses: actions/download-artifact@v2
        with:
          name: binary

      - name: Display downloaded content
        run: ls -R

      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.init.outputs.version }}
          release_name: ${{ needs.init.outputs.version }}
          draft: true
          prerelease: ${{ needs.init.outputs.prerelease }}

      - name: Upload Release Assets
        if: ${{ needs.init.outputs.release }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: v${{ needs.init.outputs.version }}
        run: |
          hub release edit -m "" -a markdown-test-report#markdown-test-report-linux-amd64 $TAG

      - name: Remove draft status
        if: ${{ needs.init.outputs.release }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: v${{ needs.init.outputs.version }}
        run: |
          # finally, remove the draft status
          hub release edit -m "" --draft=false $TAG
